// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Mugen-Builders/to-do-sqlite/internal/domain"
	"github.com/Mugen-Builders/to-do-sqlite/internal/infra/cartesi/advance_handler"
	"github.com/Mugen-Builders/to-do-sqlite/internal/infra/cartesi/inspect_handler"
	"github.com/Mugen-Builders/to-do-sqlite/internal/infra/repository"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func NewAdvanceHandlers(gormDB *gorm.DB) (*AdvanceHandlers, error) {
	toDoRepositorySQLite := repository.NewToDoRepositorySQLite(gormDB)
	toDoAdvanceHandlers := advance_handler.NewToDoAdvanceHandlers(toDoRepositorySQLite)
	advanceHandlers := &AdvanceHandlers{
		ToDoAdvanceHandlers: toDoAdvanceHandlers,
	}
	return advanceHandlers, nil
}

func NewInspectHandlers(gormDB *gorm.DB) (*InspectHandlers, error) {
	toDoRepositorySQLite := repository.NewToDoRepositorySQLite(gormDB)
	toDoInspectHandlers := inspect_handler.NewToDoInspectHandlers(toDoRepositorySQLite)
	inspectHandlers := &InspectHandlers{
		ToDoInspectHandlers: toDoInspectHandlers,
	}
	return inspectHandlers, nil
}

// wire.go:

var setToDoRepositoryDependency = wire.NewSet(repository.NewToDoRepositorySQLite, wire.Bind(new(domain.ToDoRepository), new(*repository.ToDoRepositorySQLite)))

var setAdvanceHandlers = wire.NewSet(advance_handler.NewToDoAdvanceHandlers)

var setInspectHandlers = wire.NewSet(inspect_handler.NewToDoInspectHandlers)

type AdvanceHandlers struct {
	ToDoAdvanceHandlers *advance_handler.ToDoAdvanceHandlers
}

type InspectHandlers struct {
	ToDoInspectHandlers *inspect_handler.ToDoInspectHandlers
}
